import unittest
import random
import os
from pairs import *

# Required test cases
# n=100
# n=10000
# n=500000
# n=1000000
# randomly generate integers
# compare complexity rates in terms of operations

class TestData:

    # Remove file artifact generated by test suite
    def clean_artifact(filename):
        try:
            os.remove(filename)
        except OSError:
            pass


    # Count the number of lines in a file
    def count_lines(filename):
        lines = 0
        f = open(filename, "r")
        lines = len(f.readlines())
        f.close()
        return lines

    # Generate a random point where floor <= x, y <= ceiling
    def generate_random_point(floor=0, ceiling=100):
        x = random.randint(floor, ceiling)
        y = random.randint(floor, ceiling)
        point = Point(x, y)
        return point

    # Generate a pair of random points:
    def generate_random_pair():
        point1 = TestData.generate_random_point()
        point2 = TestData.generate_random_point()
        return (point1, point2)

    # Generate a list of random (i.e. not algorithmically paired) pairs of length size
    def generate_random_pairs_list(size):
        pairs = []
        for index in range(size):
            pair = TestData.generate_random_pair()
            pairs.append(pair)
        return pairs


class UnitTests(unittest.TestCase):
    
    # Test that display_pairs writes len(pairs) > 30 to file
    def test_write_pairs(self):
        size = 31
        actual = -1
        filename = "testpairs.txt"
        pairs = TestData.generate_random_pairs_list(size)

        try:
            display_pairs(pairs, filename)
            actual = TestData.count_lines(filename)
            #TestData.clean_artifact(filename)

        except Exception as e:
            self.fail(str(e))

        self.assertEqual(actual, size)

    #Test that display_pairs does not write len(pairs) <= 30 to file
    def test_print_pairs(self):
        size = 30
        filename = "testpairs.txt"
        pairs = TestData.generate_random_pairs_list(size)
        TestData.clean_artifact(filename)

        try:
            display_pairs(pairs, filename)
            
        except Exception as e:
            self.fail(str(e))

        file_exists = os.path.isfile(filename)
        self.assertFalse(file_exists)

# class IntegrationTests(unittest.TestCase):

#     def test_1(self):
#         result = True
#         self.assertEqual(result, True)

if __name__ == '__main__':
    unittest.main()