import random
import os

from pairs import *

'''
# Author: Hannah Ripley
# Date: 09/30/2024
# Description: Utility methods for generating test Data Sets
'''

# Remove file artifact generated by test suite
def clean_artifact(filename):
    try:
        os.remove(filename)
    except OSError:
        pass

# Remove file artifacts generated by test suite
def clean_artifacts(files):
    for filename in files:
        clean_artifact(filename)

# Count the number of lines in a file
def count_lines(filename):
    lines = 0
    f = open(filename, "r")
    lines = len(f.readlines())
    f.close()
    return lines

# Generate a random point where floor <= x, y <= ceiling
def generate_random_point(floor=0, ceiling=100):
    x = random.randint(floor, ceiling)
    y = random.randint(floor, ceiling)
    point = Point(x, y)
    return point

# Generate a pair of random points:
def generate_random_pair():
    point1 = generate_random_point()
    point2 = generate_random_point()
    return (point1, point2)

# Generate a list of random (i.e. not algorithmically paired) pairs of length size
def generate_random_pairs_list(size):
    pairs = []
    for index in range(size):
        pair = generate_random_pair()
        pairs.append(pair)
    return pairs

# Generate a list of random Points of length size
def generate_random_points_list(size):
    points = []
    for index in range(size):
        point = generate_random_point()
        points.append(point)
    return points

class ClosePairs:
    def __init__ (self, pairs, points):
        self.pairs = pairs
        self.points = points

# Generate a structure containing points and close pairs
def generate_closest_pairs_list(n):
    pairs = []
    points = []
    # create a series of closest pairs of points
    for i in range(n):
        x1 = round(10*i + random.random() * 5, 2)
        y1 = round(10*i + random.random() * 5, 2)
        x2 = round(10*i + random.random() * 5, 2)
        y2 = round(10*i + random.random() * 5, 2)
        point1 = Point(x1, y1)
        point2 = Point(x2, y2)
        pairs.append((point1, point2))
        pairs.append((point2, point1))
        points.append(point1)
        points.append(point2)
    
    # randomize the list of points
    random.shuffle(points)
    return ClosePairs(pairs, points)