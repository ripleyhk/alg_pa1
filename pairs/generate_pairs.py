from closest_pairs import *
import os, random, math


'''
# Author: Hannah Ripley
# Date: 09/30/2024
# Description: Utility methods for generating test Data Sets
'''

# Remove file artifact generated by test suite
def clean_artifact(filename: str):
    try:
        os.remove(filename)
    except OSError:
        pass

# Remove file artifacts generated by test suite
def clean_artifacts(files: list[str]):
    for filename in files:
        clean_artifact(filename)

# Count the number of lines in a file
def count_lines(filename: str) -> int:
    lines = 0
    f = open(filename, "r")
    lines = len(f.readlines())
    f.close()
    return lines

# Generate a random point where floor <= x, y <= ceiling
def generate_random_point(floor=0, ceiling=100) -> Point:
    x = random.randint(floor, ceiling)
    y = random.randint(floor, ceiling)
    point = Point(x, y)
    return point

# Generate a random point, some distance away from another point
def generate_point_by_distance(distance: float, other: Point) -> Point:
    angle = random.uniform(math.pi/-3, math.pi/3)
    x = other.x + distance * math.cos(angle)
    y = other.y + distance * math.sin(angle)
    return Point(x, y)

# Generate a pair of random points:
def generate_random_pair() -> Pair:
    point1 = generate_random_point()
    point2 = generate_random_point()
    dist = calculate_distance(point1, point2)
    return Pair(point1, point2, dist)

# Generate a list of random (i.e. not algorithmically paired) pairs of length size
def generate_random_pairs_list(size: int) -> list[Pair]:
    pairs = []
    for index in range(size):
        pair = generate_random_pair()
        pairs.append(pair)
    return pairs

# Generate a list of random Points of length size
def generate_random_points_list(size: int) -> list[Point]:
    points = []
    for index in range(size):
        point = generate_random_point()
        points.append(point)
    return points

class ClosePair:
    def __init__ (self, pair: Pair, points: list[Point]):
        self.pair = pair
        self.points = points

# Generate a structure containing points and a closest pair
# with a distance of min_dist if specified, else 0.5
def generate_points_and_pair(n: int, min_dist=0.5) -> ClosePair:
    points = []
    root = random.randint(1, n-2)
    next_point = generate_random_point()
    points.append(next_point)
    for index in range(1, root):
        distance = min_dist + random.uniform(0.5, min_dist)
        next_point = generate_point_by_distance(distance, next_point)
        points.append(next_point)

    point = next_point
    next_point = generate_point_by_distance(min_dist, point)
    points.append(next_point)
    pair = Pair(point, next_point, min_dist)

    for index in range(root+1, n):
        distance = min_dist + random.uniform(0.5, min_dist)
        next_point = generate_point_by_distance(distance, next_point)
        points.append(next_point)

    # randomize the list of points
    random.shuffle(points)
    return ClosePair(pair, points)